import Core, { ConfigKey, Operation, ResponseAdapter, PaginatedRequest, PaginatedOperation, PaginatedResponseAdapter, Module, Core as Core$1 } from '@moralisweb3/common-core';

declare const ApiUtilsConfig: {
    apiKey: ConfigKey<string | null>;
};

interface ApiUtilsConfigValues {
    apiKey: string;
}

type EndpointMethod = 'get' | 'post' | 'put' | 'delete';
interface EndpointDescriptor {
    name: string;
    urlPatternParamNames: string[];
    urlPattern: string;
    bodyParamNames: string[];
    method: EndpointMethod;
}

declare function convertOperationToDescriptor(operation: Operation<any, any, any, any>): EndpointDescriptor;

type Headers = {
    [key: string]: string;
};
/**
 * Additional data for the api to specify SDK details of the request
 */
declare const getSdkDetailsHeaders: (product?: string) => Headers;

declare class OperationResolver<Request, JSONRequest, Response, JSONResponse> {
    private readonly operation;
    private readonly baseUrl;
    private readonly core;
    private readonly requestValidator;
    private readonly requestBuilder;
    private readonly requestController;
    constructor(operation: Operation<Request, JSONRequest, Response, JSONResponse>, baseUrl: string, core: Core);
    readonly fetch: (request: Request) => Promise<ResponseAdapter<Response, JSONResponse>>;
}

declare class NullableOperationResolver<Request, JSONRequest, Response, JSONResponse> {
    private readonly operation;
    private readonly baseUrl;
    private readonly core;
    private readonly requestValidator;
    private readonly requestBuilder;
    private readonly requestController;
    constructor(operation: Operation<Request, JSONRequest, Response, JSONResponse>, baseUrl: string, core: Core);
    readonly fetch: (request: Request) => Promise<ResponseAdapter<Response, JSONResponse> | null>;
    private _fetch;
}

declare class PaginatedOperationResolver<Request extends PaginatedRequest, JSONRequest, Result, JSONResult> {
    private readonly operation;
    private readonly baseUrl;
    private readonly core;
    private readonly requestValidator;
    private readonly requestBuilder;
    private readonly requestController;
    constructor(operation: PaginatedOperation<Request, JSONRequest, Result, JSONResult>, baseUrl: string, core: Core);
    readonly fetch: (request: Request) => Promise<PaginatedResponseAdapter<Result, JSONResult>>;
}

type UnknownNullableOperationResolver = NullableOperationResolver<unknown, unknown, unknown, unknown>;
type UnknownPaginatedOperationResolver = PaginatedOperationResolver<any, unknown, unknown, unknown>;
type UnknownDefaultOperationResolver = OperationResolver<unknown, unknown, unknown, unknown>;
type UnknownOperationResolver = UnknownNullableOperationResolver | UnknownPaginatedOperationResolver | UnknownDefaultOperationResolver;

declare class ApiUtils extends Module {
    static readonly moduleName = "api";
    static create(core?: Core$1): ApiUtils;
    constructor(core: Core$1);
    setup(): void;
    start(): void | Promise<void>;
}

export { ApiUtils, ApiUtilsConfig, ApiUtilsConfigValues, EndpointDescriptor, EndpointMethod, Headers, NullableOperationResolver, OperationResolver, PaginatedOperationResolver, UnknownDefaultOperationResolver, UnknownNullableOperationResolver, UnknownOperationResolver, UnknownPaginatedOperationResolver, convertOperationToDescriptor, getSdkDetailsHeaders };
