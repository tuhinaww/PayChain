import { CoreConfig, MoralisApiError, ApiErrorCode, CoreProvider, RequestController } from '@moralisweb3/common-core';
import { AbstractClient, AptosNetworkResolver } from '@moralisweb3/common-aptos-utils';
import { ApiUtilsConfig, getSdkDetailsHeaders } from '@moralisweb3/api-utils';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var OperationV3Resolver = /** @class */ (function () {
    function OperationV3Resolver(baseUrlResolver, config, requestController) {
        this.baseUrlResolver = baseUrlResolver;
        this.config = config;
        this.requestController = requestController;
    }
    OperationV3Resolver.prototype.resolve = function (request, body, operation) {
        return __awaiter(this, void 0, void 0, function () {
            var urlParamNames, requestJSON, url, searchParams, bodyJSON, responseJSON;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        urlParamNames = operation.parameterNames.filter(function (name) { return operation.routePattern.includes("{".concat(name, "}")); });
                        requestJSON = operation.serializeRequest
                            ? operation.serializeRequest(request)
                            : {};
                        url = urlParamNames.reduce(function (current, name) {
                            var value = requestJSON[name];
                            current = current.replace("{".concat(name, "}"), String(value));
                            return current;
                        }, operation.routePattern);
                        searchParams = operation.parameterNames
                            .filter(function (name) { return !urlParamNames.includes(name); })
                            .reduce(function (current, name) {
                            current[name] = requestJSON[name];
                            return current;
                        }, {});
                        bodyJSON = body && operation.serializeBody ? operation.serializeBody(body) : undefined;
                        return [4 /*yield*/, this.requestController.request({
                                url: url,
                                params: searchParams,
                                baseURL: this.baseUrlResolver.resolve(request),
                                method: operation.httpMethod,
                                data: bodyJSON,
                                headers: this.prepareHeaders(),
                            })];
                    case 1:
                        responseJSON = _a.sent();
                        if (!responseJSON || !operation.parseResponse) {
                            if (operation.hasResponse) {
                                throw new Error('Expected response, but API has returned empty response');
                            }
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/, operation.parseResponse(responseJSON)];
                }
            });
        });
    };
    OperationV3Resolver.prototype.prepareHeaders = function () {
        var apiKey = this.config.get(ApiUtilsConfig.apiKey);
        var product = this.config.get(CoreConfig.product);
        if (!apiKey) {
            throw new MoralisApiError({
                code: ApiErrorCode.API_KEY_NOT_SET,
                message: 'apiKey is not set',
            });
        }
        var headers = getSdkDetailsHeaders();
        headers['x-api-key'] = "".concat(apiKey);
        headers['Authorization'] = "Bearer ".concat(apiKey);
        if (product) {
            headers['x-moralis-product'] = product;
        }
        return headers;
    };
    return OperationV3Resolver;
}());

var MAINNET_BASE_URL = 'https://aptos-mainnet.aws-prod-api-1.moralis.io';
var TESTNET_BASE_URL = 'https://aptos-testnet.aws-prod-api-1.moralis.io';
var AptosApi = /** @class */ (function (_super) {
    __extends(AptosApi, _super);
    function AptosApi(operationResolver) {
        var _this = _super.call(this) || this;
        _this.operationResolver = operationResolver;
        return _this;
    }
    AptosApi.create = function (core) {
        if (!core) {
            core = CoreProvider.getDefault();
        }
        var requestController = RequestController.create(core);
        var baseUrlResolver = new AptosApiBaseUrlResolver(core);
        var operationResolver = new OperationV3Resolver(baseUrlResolver, core.config, requestController);
        return new AptosApi(operationResolver);
    };
    AptosApi.prototype.createEndpoint = function (operation) {
        var _this = this;
        return function (request) {
            return _this.operationResolver.resolve(request, null, operation);
        };
    };
    AptosApi.prototype.createEndpointWithBody = function (operation) {
        var _this = this;
        return function (request, body) {
            return _this.operationResolver.resolve(request, body, operation);
        };
    };
    AptosApi.moduleName = 'aptApi';
    return AptosApi;
}(AbstractClient));
var AptosApiBaseUrlResolver = /** @class */ (function () {
    function AptosApiBaseUrlResolver(core) {
        this.core = core;
    }
    AptosApiBaseUrlResolver.prototype.resolve = function (request) {
        var network = request.network;
        if (network) {
            var finalNetwork = AptosNetworkResolver.resolve(network, this.core);
            switch (finalNetwork) {
                case 'mainnet':
                    return MAINNET_BASE_URL;
                case 'testnet':
                    return TESTNET_BASE_URL;
                default:
                    throw new Error('Not supported network');
            }
        }
        return MAINNET_BASE_URL;
    };
    return AptosApiBaseUrlResolver;
}());

var index = { AptosApi: AptosApi };

export { AptosApi, index as default };
